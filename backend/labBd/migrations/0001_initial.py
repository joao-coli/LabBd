# Generated by Django 3.0.14 on 2021-11-25 20:44

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id_usuario', models.AutoField(primary_key=True, serialize=False)),
                ('primeiro_nome', models.CharField(max_length=50)),
                ('sobrenome', models.CharField(max_length=50)),
                ('username', models.CharField(db_column='login', max_length=50, unique=True)),
                ('dominio', models.CharField(max_length=50)),
                ('data_nasc', models.DateField()),
                ('num', models.IntegerField()),
                ('logradouro', models.CharField(max_length=50)),
                ('cep', models.CharField(max_length=9)),
                ('ddd1', models.IntegerField()),
                ('prefixo1', models.IntegerField()),
                ('num1', models.IntegerField()),
                ('ddd2', models.IntegerField(blank=True, null=True)),
                ('prefixo2', models.IntegerField(blank=True, null=True)),
                ('num2', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'usuario',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),

        # Creating tables --------------------------
        migrations.RunSQL("""
        CREATE TABLE PASSAGEIRO(
            CPF VARCHAR(11) NOT NULL,
            ID_Usuario INT NOT NULL,
            nota_media real,
            
            CONSTRAINT FK_USUARIO FOREIGN KEY (ID_Usuario) REFERENCES USUARIO(ID_Usuario) ON DELETE CASCADE,
            PRIMARY KEY (CPF)
        );
        """),

        migrations.RunSQL("""
        CREATE TABLE MOTORISTA(
            numero_CNH INT NOT NULL,
            data_validade_CNH DATE NOT NULL,
            ID_Usuario INT NOT NULL,
            nota_media real,

            CONSTRAINT FK_USUARIO FOREIGN KEY (ID_Usuario) REFERENCES USUARIO(ID_Usuario) ON DELETE CASCADE,
            UNIQUE (numero_CNH, data_validade_CNH),
            PRIMARY KEY (ID_Usuario)
        );
        """),
        
        migrations.RunSQL("""
        CREATE TABLE VEICULO(
            placa VARCHAR(7) NOT NULL,
            modelo VARCHAR(255) NOT NULL,
            n_assentos INT NOT NULL,
            cor VARCHAR(50) NOT NULL,
            ano INT NOT NULL,

            PRIMARY KEY (placa)
        );
        """),

        migrations.RunSQL("""
        CREATE TABLE PONTO(
	
            ID_Ponto SERIAL,
            latitude INT NOT NULL, 
            longitude INT NOT NULL, 
            CEP VARCHAR(9) NOT NULL, 
            num INT NOT NULL, 
            logradouro VARCHAR(50) NOT NULL, 
            ponto_referencia VARCHAR(100), 
            nome VARCHAR(50) NOT NULL,
            
            UNIQUE (latitude, longitude),
            PRIMARY KEY (ID_Ponto)

        );
        """),

        migrations.RunSQL("""
        CREATE TABLE POSSUI(
	
            ID_Possui SERIAL,
            ID_Motorista INT NOT NULL,
            placa VARCHAR(7) NOT NULL,
            
            CONSTRAINT FK_MOTORISTA FOREIGN KEY (ID_Motorista) 
                REFERENCES MOTORISTA(ID_Usuario),
            CONSTRAINT FK_VEICULO FOREIGN KEY (placa) REFERENCES VEICULO(placa) ON DELETE CASCADE,
            
            UNIQUE (ID_Motorista, placa),
            PRIMARY KEY (ID_Possui)

        );
        """),

        migrations.RunSQL("""
        CREATE TABLE AGENDAMENTO(
            ID_Agendamento SERIAL,
            CPF VARCHAR(11) NOT NULL, 
            horario_agendamento TIMESTAMP NOT NULL, 
            ID_Ponto_Origem INT NOT NULL, 
            ID_Ponto_Destino INT NOT NULL, 
            data_partida DATE NOT NULL, 
            horario_partida TIME NOT NULL, 
            atraso_aceitavel INT NOT NULL, 
            adiantam_aceitavel INT NOT NULL,
            ativo SMALLINT NOT NULL DEFAULT 1,

            CONSTRAINT FK_PASSAGEIRO FOREIGN KEY (CPF) REFERENCES PASSAGEIRO(CPF) ON DELETE CASCADE,
            CONSTRAINT FK_PONTO_ORIGEM FOREIGN KEY (ID_Ponto_Origem) 
                REFERENCES PONTO(ID_Ponto) ON DELETE CASCADE,
            CONSTRAINT FK_PONTO_DESTINO FOREIGN KEY (ID_Ponto_Destino) 
                REFERENCES PONTO(ID_Ponto) ON DELETE CASCADE,
            
            UNIQUE (CPF, horario_agendamento),
            PRIMARY KEY (ID_Agendamento)
        );
        """),

        migrations.RunSQL("""
        CREATE TABLE OFERTA_DE_CARONA(
            ID_Oferta_De_Carona SERIAL,
            ID_Possui INT NOT NULL,
            data_partida DATE NOT NULL,
            horario_partida TIME NOT NULL,
            vagas_ofertadas INT NOT NULL,
            vagas_disponiveis INT,

            CONSTRAINT FK_POSSUI FOREIGN KEY (ID_Possui) 
                REFERENCES Possui(ID_Possui) ON DELETE CASCADE,
            
            UNIQUE (ID_Possui, data_partida, horario_partida),
            PRIMARY KEY (ID_Oferta_De_Carona)
        );
        """),

        migrations.RunSQL("""
        CREATE TABLE _MATCH(
            ID_Match SERIAL,
            ID_Agendamento INT NOT NULL,
            ID_Oferta_De_Carona INT NOT NULL,


            CONSTRAINT FK_OFERTA_DE_CARONA FOREIGN KEY (ID_Oferta_De_Carona)
                REFERENCES OFERTA_DE_CARONA(ID_Oferta_De_Carona) ON DELETE CASCADE,
            CONSTRAINT FK_AGENDAMENTO FOREIGN KEY (ID_Agendamento) 
                REFERENCES AGENDAMENTO(ID_Agendamento) ON DELETE CASCADE,
            
            UNIQUE (ID_Agendamento, ID_Oferta_De_Carona),
            PRIMARY KEY (ID_Match)
        );
        """),

        migrations.RunSQL("""
        CREATE TABLE RESERVA(
            ID_Reserva SERIAL,
            ID_Match INT NOT NULL,

            CONSTRAINT FK_MATCH FOREIGN KEY (ID_Match) 
                REFERENCES _MATCH(ID_Match) ON DELETE CASCADE,
            
            UNIQUE (ID_Match),
            PRIMARY KEY (ID_Reserva)
        );
        """),

        migrations.RunSQL("""
        CREATE TABLE CARONA(
            ID_Reserva INT NOT NULL,
            horario_saida TIME NOT NULL, 
            horario_chegada TIME, 
            avaliacao_motorista TEXT, 
            avaliacao_passageiro TEXT,
            nota_passageiro INT,
            nota_motorista INT,

            CONSTRAINT FK_RESERVA FOREIGN KEY (ID_Reserva)
                REFERENCES RESERVA(ID_Reserva) ON DELETE CASCADE,
            
            PRIMARY KEY (ID_Reserva, horario_saida, horario_chegada)

        );
        """),

        migrations.RunSQL("""
        CREATE TABLE PASSA_POR(
            ID_Oferta_De_Carona INT NOT NULL,
            ID_Ponto INT NOT NULL,
            ponto_final BOOLEAN NOT NULL,
            ponto_inicial BOOLEAN NOT NULL,

            CONSTRAINT FK_OFERTA_DE_CARONA FOREIGN KEY (ID_Oferta_De_Carona)
                REFERENCES OFERTA_DE_CARONA(ID_Oferta_De_Carona) ON DELETE CASCADE,
            CONSTRAINT FK_PONTO FOREIGN KEY (ID_Ponto) 
                REFERENCES PONTO(ID_Ponto) ON DELETE CASCADE,
            
            PRIMARY KEY (ID_Oferta_De_Carona, ID_Ponto)
        );

        """),

        migrations.CreateModel(
            name='Agendamento',
            fields=[
                ('id_agendamento', models.AutoField(primary_key=True, serialize=False)),
                ('horario_agendamento', models.DateTimeField()),
                ('data_partida', models.DateField()),
                ('horario_partida', models.TimeField()),
                ('atraso_aceitavel', models.IntegerField()),
                ('adiantam_aceitavel', models.IntegerField()),
                ('ativo', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'agendamento',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id_match', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': '_match',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OfertaDeCarona',
            fields=[
                ('id_oferta_de_carona', models.AutoField(primary_key=True, serialize=False)),
                ('data_partida', models.DateField()),
                ('horario_partida', models.TimeField()),
                ('vagas_ofertadas', models.IntegerField()),
                ('vagas_disponiveis', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'oferta_de_carona',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Passageiro',
            fields=[
                ('cpf', models.CharField(max_length=11, primary_key=True, serialize=False)),
                ('nota_media', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'passageiro',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ponto',
            fields=[
                ('id_ponto', models.AutoField(primary_key=True, serialize=False)),
                ('latitude', models.IntegerField()),
                ('longitude', models.IntegerField()),
                ('cep', models.CharField(max_length=9)),
                ('num', models.IntegerField()),
                ('logradouro', models.CharField(max_length=50)),
                ('ponto_referencia', models.CharField(blank=True, max_length=100, null=True)),
                ('nome', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'ponto',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Possui',
            fields=[
                ('id_possui', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'possui',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id_reserva', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'reserva',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Veiculo',
            fields=[
                ('placa', models.CharField(max_length=7, primary_key=True, serialize=False)),
                ('modelo', models.CharField(max_length=255)),
                ('n_assentos', models.IntegerField()),
                ('cor', models.CharField(max_length=50)),
                ('ano', models.IntegerField()),
            ],
            options={
                'db_table': 'veiculo',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Carona',
            fields=[
                ('id_reserva', models.OneToOneField(db_column='id_reserva', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='labBd.Reserva')),
                ('horario_saida', models.TimeField()),
                ('horario_chegada', models.TimeField()),
                ('avaliacao_motorista', models.TextField(blank=True, null=True)),
                ('avaliacao_passageiro', models.TextField(blank=True, null=True)),
                ('nota_passageiro', models.IntegerField(blank=True, null=True)),
                ('nota_motorista', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'carona',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Motorista',
            fields=[
                ('numero_cnh', models.IntegerField()),
                ('data_validade_cnh', models.DateField()),
                ('id_usuario', models.OneToOneField(db_column='id_usuario', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nota_media', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'motorista',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PassaPor',
            fields=[
                ('id_oferta_de_carona', models.OneToOneField(db_column='id_oferta_de_carona', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='labBd.OfertaDeCarona')),
                ('ponto_final', models.BooleanField()),
                ('ponto_inicial', models.BooleanField()),
            ],
            options={
                'db_table': 'passa_por',
                'managed': False,
            },
        ),
    ]
